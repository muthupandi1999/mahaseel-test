import express from "express";
import { ApolloServer, gql } from "apollo-server-express";
import oracledb from "oracledb";

async function startApolloServer() {
    const port = 4000
    const app = express();

    const config: oracledb.PoolAttributes = {
        user: 'SYSTEM',
        password: 'root123',
        connectString: '(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=CIPL1117UI)(PORT=1522))(CONNECT_DATA=(SERVER=DEDICATED)(SID=xe)))',
        poolMax: 4,
        poolMin: 0,
        poolIncrement: 1,
    };

    const pool = await oracledb.createPool(config);

    const typeDefs = `
  type User {
    id: Int!
    name: String!
    email: String!
  }

  input UserInput {
    name: String!
    email: String!
  }

  type Query {
    greeting:String
    employees: [User!]!
    getUser(id: Int!): User
    getUsers: [User]
  }

  type Mutation {
    createUser(input: UserInput): User
    updateUser(id: Int!, input: UserInput): User
    deleteUser(id: Int!): User
  }
`;

    const resolvers = {
        Query: {
            greeting: () => "hello",
            employees: async () => {
                let connection;

                try {
                    connection = await oracledb.getConnection({
                        user: 'SYSTEM',
                        password: 'root123',
                        connectString: '(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=CIPL1117UI)(PORT=1522))(CONNECT_DATA=(SERVER=DEDICATED)(SID=xe)))',
                    });

                    const result = await connection.execute(`
                    SELECT *
                    FROM employees
                  `);

                    console.log("Result", result);


                    var valueTab = await result.rows.map((row: any) => {
                        console.log(row)
                        return row.ID
                        // name: row.NAME,
                        // email: row.EMAIL,
                    })

                    console.log("Valuue", valueTab);

                } catch (error) {
                    console.error(error);
                    throw error;
                } finally {
                    if (connection) {
                        try {
                            await connection.close();
                        } catch (error) {
                            console.error(error);
                        }
                    }
                }
            },
            getUser: async (_, { id }) => {
                const connection = await pool.getConnection();
                const result = await connection.execute(
                    `SELECT * FROM employees WHERE id = :id`,
                    [id]
                );
                const user = await result.rows[0];

                console.log("user", user)
                await connection.close();

                return await user;
            },
            getUsers: async () => {

                const connection = await pool.getConnection();
                const result = await connection.execute(`SELECT * FROM employees`);
                console.log(result.rows)
                const users = await result.rows;
                return users;
                await connection.close();


            },
        },
        Mutation: {
            createUser: async (_, { input }) => {

                const connection = await pool.getConnection();

                console.log("hloooo");

                // const result = await connection.execute(`INSERT INTO employees VALUES (
                //     '{ "name": ":name", "email": ":email"}');
                // COMMIT;`)

                const result = await connection.execute(`INSERT INTO employees( name, email) VALUES (:name, :email)`, [input.name, input.email] || {});

                console.log(result)

                var valueTab = await result.rows.map((row: any) => {
                    console.log(row)
                    return row.ID
                    // name: row.NAME,
                    // email: row.EMAIL,
                })
                // const res = await result.rows[0];
                console.log(valueTab)
                const user = await result.rows[0];



                await connection.close();
                return user;
                // return user;
            },
            updateUser: async (_, { id, input }) => {
                const connection = await pool.getConnection();
                const result = await connection.execute(
                    `UPDATE employees SET name = :name, email = :email WHERE id = :id RETURNING *`,
                    [input.name, input.email, id]
                );
                const user = result.rows[0];
                await connection.close();
                return user;
            },
            deleteUser: async (_, { id }) => {
                const connection = await pool.getConnection();
                const result = await connection.execute(
                    `DELETE FROM employees WHERE id = :id `,
                    [id]
                );
                console.log(result)
                const user = result.rows[0];
                await connection.close();
                return user;
            },
        },
    };

    const server = new ApolloServer({ typeDefs, resolvers });

    await server.start();

    server.applyMiddleware({ app });

    app.listen(4000, () =>
        console.log(
            'Server ready at http://localhost:4000/graphql'
        )
    );

}

startApolloServer()

